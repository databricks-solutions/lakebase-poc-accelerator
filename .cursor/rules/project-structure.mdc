---
alwaysApply: true
---

# Databricks Lakebase Accelerator Project Structure

This is a Databricks Lakebase Accelerator project focused on OLTP workload migration and testing.

## Key Files and Directories

- **Main cost estimator**: [src/lakebase_cost_estimator.py](mdc:src/lakebase_cost_estimator.py) - Calculates Lakebase Postgres costs with table size calculation
- **Query converter**: [src/convert_queries.py](mdc:src/convert_queries.py) - Converts SQL queries using LLM
- **Table generator**: [src/generate_synced_tables.py](mdc:src/generate_synced_tables.py) - Generates synced_delta_tables.yml from workload config
- **Workload config**: [quickstarts/quickstarts_workload_config.yml](mdc:quickstarts/quickstarts_workload_config.yml) - Main workload configuration
- **Synced tables**: [quickstarts/resources/synced_delta_tables.yml](mdc:quickstarts/resources/synced_delta_tables.yml) - Generated table sync configuration
- **Requirements**: [requirements.txt](mdc:requirements.txt) - Python dependencies including databricks-sql-connector

## Environment Variables

- `DATABRICKS_ACCESS_TOKEN` - Single token used for both query conversion and table size calculation
- `DATABRICKS_SERVER_HOSTNAME` - Databricks workspace hostname for table size calculation
- `DATABRICKS_HTTP_PATH` - SQL warehouse HTTP path for table size calculation
- `DATABRICKS_ENDPOINT` - Serving endpoint for query conversion
- `MODEL_NAME` - LLM model for query conversion (default: databricks-meta-llama-3-1-70b-instruct)

## Project Focus

- Data engineering and analytics solutions
- Lakebase Postgres cost estimation
- Delta table synchronization
- OLTP workload migration